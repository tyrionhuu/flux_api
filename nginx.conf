# FLUX API Load Balancer Configuration
# Distributes requests across multiple GPU instances

events {
    worker_connections 1024;
}

http {
    # Define upstream servers - one per GPU
    upstream flux_api_backend {
        # Use least connections algorithm for better load distribution
        least_conn;
        
        # GPU 2 - Port 23333 (active)
        server 127.0.0.1:23333 max_fails=3 fail_timeout=30s;
        
        # GPU 3 - Port 23334 (active)
        server 127.0.0.1:23334 max_fails=3 fail_timeout=30s;
        
        # Keepalive connections for better performance
        keepalive 32;
    }

    server {
    listen 8080;  # Listen on all interfaces
    listen [::]:8080;  # IPv6 support
    server_name _;  # Accept any hostname
    
    # Client body size limit for LoRA uploads (1GB)
    client_max_body_size 1024M;
    
    # Longer timeouts for image generation
    proxy_connect_timeout 600s;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;
    send_timeout 600s;
    
    # Main API endpoint
    location / {
        proxy_pass http://flux_api_backend;
        
        # Pass real client information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (if needed for streaming)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Keep connections alive
        proxy_set_header Connection "";
    }
    
    # Health check endpoint (nginx plus feature, or use external monitoring)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Status page (optional, requires nginx stub_status module)
    location /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }
}

    # Optional: SSL configuration
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     
    #     # ... rest of configuration same as above ...
    # }
}  # Close http block